/*Нужно написать класс на Java/Swift/Golang/С (Си), в зависимости от вакансии на которую вы откликаетесь
 (другие задачи на других языках рассматриваться не будут), со следующим интерфейсом (псевдокод):
*/

    class Incrementor {
int Number = 0;
int maximumValue=Integer.MAX_VALUE;

        public Incrementor() {
        }


        /**

         * Возвращает текущее число. В самом начале это ноль.

         */

        int getNumber() {
         return Number;
        }

        /**

         * Увеличивает текущее число на один. После каждого вызова этого

         * метода getNumber() будет возвращать число на один больше.

         */

        void incrementNumber() {
            Number++;
            if (Number==maximumValue) {
                Number=0;
            }
        }

        /**

         * Устанавливает максимальное значение текущего числа.

         * Когда при вызове incrementNumber() текущее число достигает

         * этого значения, оно обнуляется, т.е. getNumber() начинает

         * снова возвращать ноль, и снова один после следующего

         * вызова incrementNumber() и так далее.

         * По умолчанию максимум -- максимальное значение int.

         * Если при смене максимального значения число начинает

         * превышать максимальное значение, то число надо обнулить.

         * Нельзя позволять установить тут число меньше нуля.

         */

        void setMaximumValue(int newMaximumValue) {
            if (newMaximumValue>=0) {
                maximumValue=newMaximumValue;
            }

        }

    }

   /* Т.е. класс очень простой. А теперь сложность: оно должно быть сделано очень хорошо.
   Т.е. максимально качественно, как только можно. Код должен быть идеальным,
   все должно быть покрыто unit тестами. Классы и все методы должны быть полностью покрыты понятной (
   т.е. полезной, а не для отписки) javadoc (для Java) или аналогом для Swift и Golang документацией.
    В общем, нужно сделать такой код, который каждый разработчик мечтает получить на поддержку --
    идеальный (насколько кандидат способен).

    Обратить внимание на:

    Форматирование кода.

    Нэйминг (названия всех сущностей).

    Покрытие тестами.

    Наличие документации.

    Общая читабельность и простота кода.


    Результат необходимо предоставить в виде скрытого gist-а на gist.github.com.

    */


